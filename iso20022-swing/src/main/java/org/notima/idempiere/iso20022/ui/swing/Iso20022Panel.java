/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Iso20022Panel.java
 *
 * Created on 2014-jun-19, 16:10:16
 */

package org.notima.idempiere.iso20022.ui.swing;

import java.util.SortedMap;
import org.notima.idempiere.iso20022.Iso20022Settings;
import org.notima.bankgiro.adempiere.form.I_LBSettingsPanel;
import org.notima.bankgiro.adempiere.form.XX_LBSettingsDialog;
import org.notima.bankgiro.adempiere.model.MLBSettings;

/**
 *
 * @author Daniel Tamm
 */
public class Iso20022Panel extends javax.swing.JPanel implements I_LBSettingsPanel {

    /**
	 * 
	 */
    private static final long serialVersionUID = 1L;
    private SortedMap<String, MLBSettings>      m_settings;
    private XX_LBSettingsDialog                 m_parentDialog;
    
    /** Creates new form Iso20022Panel */
    public Iso20022Panel() {
        initComponents();
    }

    public void initPanel(XX_LBSettingsDialog parent, SortedMap<String, MLBSettings> settings) {
    	m_parentDialog = parent;
    	m_settings = settings;
    	
    }
    
    @Override
    public void getForm() {
        MLBSettings.setSetting(Iso20022Settings.ISO20022_OUTPUT_DIR, directoryText.getText());
        MLBSettings.setSetting(Iso20022Settings.ISO20022_FILE_NAME, fileNameText.getText());
        MLBSettings.setSetting(Iso20022Settings.ISO20022_ADD_TS, addTimeToFileCheck.isSelected() ? "Y" : "N");
        MLBSettings.setSetting(Iso20022Settings.ISO20022_FILE_SUFFIX, fileSuffixText.getText());
        MLBSettings.setSetting(Iso20022Settings.ISO20022_RECONCILIATION_DIR, defaultDirText.getText());
        MLBSettings.setSetting(Iso20022Settings.ISO20022_RECONCILIATION_MOVETO_DIR, archiveDirText.getText());
    }

    @Override
    public void setForm() {

        MLBSettings outputDir = m_settings.get(Iso20022Settings.ISO20022_OUTPUT_DIR);
        directoryText.setText(outputDir!=null ? outputDir.getName() : "");
        MLBSettings fileName = m_settings.get(Iso20022Settings.ISO20022_FILE_NAME);
        fileNameText.setText(fileName!=null ? fileName.getName() : "BGDATA");
        MLBSettings addTime = m_settings.get(Iso20022Settings.ISO20022_ADD_TS);
        addTimeToFileCheck.setSelected(addTime!=null && "Y".equalsIgnoreCase(addTime.getName()));
        MLBSettings fileSuffix = m_settings.get(Iso20022Settings.ISO20022_FILE_SUFFIX);
        fileSuffixText.setText(fileSuffix!=null ? fileSuffix.getName() : "xml");

        MLBSettings defaultDir = m_settings.get(Iso20022Settings.ISO20022_RECONCILIATION_DIR);
        defaultDirText.setText(defaultDir!=null ? defaultDir.getName() : "");
        MLBSettings archiveDir = m_settings.get(Iso20022Settings.ISO20022_RECONCILIATION_MOVETO_DIR);
        archiveDirText.setText(archiveDir!=null ? archiveDir.getName() : "");

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        createFilePanel = new javax.swing.JPanel();
        directoryLabel = new javax.swing.JLabel();
        directoryText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();
        fileNameText = new javax.swing.JTextField();
        addTimeToFileCheck = new javax.swing.JCheckBox();
        fileSuffixLabel = new javax.swing.JLabel();
        fileSuffixText = new javax.swing.JTextField();
        readFilesPanel = new javax.swing.JPanel();
        defaultDirLabel = new javax.swing.JLabel();
        defaultDirText = new javax.swing.JTextField();
        browseDefaultDirButton = new javax.swing.JButton();
        archiveDirLabel = new javax.swing.JLabel();
        archiveDirText = new javax.swing.JTextField();
        browseArchiveDirButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(500, 320));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        createFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Create ISO 20022-files"));
        createFilePanel.setMinimumSize(new java.awt.Dimension(200, 50));
        createFilePanel.setLayout(new java.awt.GridBagLayout());

        directoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        directoryLabel.setText("Output directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        createFilePanel.add(directoryLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        createFilePanel.add(directoryText, gridBagConstraints);

        browseButton.setText("Browse");
        browseButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        createFilePanel.add(browseButton, new java.awt.GridBagConstraints());

        fileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileNameLabel.setText("File name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        createFilePanel.add(fileNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        createFilePanel.add(fileNameText, gridBagConstraints);

        addTimeToFileCheck.setText("Add time to file name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        createFilePanel.add(addTimeToFileCheck, gridBagConstraints);

        fileSuffixLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileSuffixLabel.setText("File suffix");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        createFilePanel.add(fileSuffixLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        createFilePanel.add(fileSuffixText, gridBagConstraints);

        add(createFilePanel);

        readFilesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Read reconciliation files"));
        readFilesPanel.setLayout(new java.awt.GridBagLayout());

        defaultDirLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        defaultDirLabel.setText("Default directory ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        readFilesPanel.add(defaultDirLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        readFilesPanel.add(defaultDirText, gridBagConstraints);

        browseDefaultDirButton.setText("Browse");
        browseDefaultDirButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        browseDefaultDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDefaultDirButtonActionPerformed(evt);
            }
        });
        readFilesPanel.add(browseDefaultDirButton, new java.awt.GridBagConstraints());

        archiveDirLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        archiveDirLabel.setText("Archive directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        readFilesPanel.add(archiveDirLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        readFilesPanel.add(archiveDirText, gridBagConstraints);

        browseArchiveDirButton.setText("Browse");
        browseArchiveDirButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        browseArchiveDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseArchiveDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        readFilesPanel.add(browseArchiveDirButton, gridBagConstraints);

        add(readFilesPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed

        MLBSettings outputDir = m_settings.get(Iso20022Settings.ISO20022_OUTPUT_DIR);
        String startDir = outputDir != null ? outputDir.getName() : null;
        String newDir = m_parentDialog.browseForDirectory(startDir);
        if (newDir!=null) {
            directoryText.setText(newDir);
            getForm();
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void browseDefaultDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDefaultDirButtonActionPerformed

        MLBSettings outputDir = m_settings.get(Iso20022Settings.ISO20022_RECONCILIATION_DIR);
        String startDir = outputDir != null ? outputDir.getName() : null;
        String newDir = m_parentDialog.browseForDirectory(startDir);
        if (newDir!=null) {
            defaultDirText.setText(newDir);
            getForm();
        }
    }//GEN-LAST:event_browseDefaultDirButtonActionPerformed

    private void browseArchiveDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseArchiveDirButtonActionPerformed

        MLBSettings outputDir = m_settings.get(Iso20022Settings.ISO20022_RECONCILIATION_MOVETO_DIR);
        String startDir = outputDir != null ? outputDir.getName() : null;
        String newDir = m_parentDialog.browseForDirectory(startDir);
        if (newDir!=null) {
            archiveDirText.setText(newDir);
            getForm();
        }

    }//GEN-LAST:event_browseArchiveDirButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addTimeToFileCheck;
    private javax.swing.JLabel archiveDirLabel;
    private javax.swing.JTextField archiveDirText;
    private javax.swing.JButton browseArchiveDirButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton browseDefaultDirButton;
    private javax.swing.JPanel createFilePanel;
    private javax.swing.JLabel defaultDirLabel;
    private javax.swing.JTextField defaultDirText;
    private javax.swing.JLabel directoryLabel;
    private javax.swing.JTextField directoryText;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameText;
    private javax.swing.JLabel fileSuffixLabel;
    private javax.swing.JTextField fileSuffixText;
    private javax.swing.JPanel readFilesPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return("ISO20022 settings");
    }

    @Override
    public String getTip() {
        return("ISO20022 settings");
    }


}
